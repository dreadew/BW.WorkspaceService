// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WorkspaceService.Infrastructure.Data;

#nullable disable

namespace WorkspaceService.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250608122209_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WorkspaceService.Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("EventType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsSent")
                        .HasColumnType("boolean");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.Workspace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PicturePath")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("workspace", "workspace");
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspaceDirectory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkspaceId");

                    b.HasIndex("Name", "WorkspaceId")
                        .IsUnique();

                    b.ToTable("workspace_directory", "workspace");
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspaceDirectoryArtifact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DirectoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DirectoryId");

                    b.ToTable("workspace_directory_artifact", "workspace");
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspaceDirectoryNesting", b =>
                {
                    b.Property<Guid>("ParentDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChildDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChildDirectoryNavigationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParentDirectoryNavigationId")
                        .HasColumnType("uuid");

                    b.HasKey("ParentDirectoryId", "ChildDirectoryId");

                    b.HasIndex("ChildDirectoryId");

                    b.HasIndex("ChildDirectoryNavigationId");

                    b.HasIndex("ParentDirectoryNavigationId");

                    b.ToTable("workspace_directory_nesting", "workspace");
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspacePosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkspaceId");

                    b.HasIndex("Name", "WorkspaceId")
                        .IsUnique();

                    b.ToTable("workspace_position", "workspace");
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspaceRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkspaceId", "Name")
                        .IsUnique();

                    b.ToTable("workspace_role", "auth");
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspaceRoleClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("workspace_role_claim", "auth");
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspaceUser", b =>
                {
                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("WorkspaceId", "UserId");

                    b.HasIndex("PositionId");

                    b.HasIndex("RoleId");

                    b.ToTable("workspace_user", "workspace");
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspaceDirectory", b =>
                {
                    b.HasOne("WorkspaceService.Domain.Entities.Workspace", null)
                        .WithMany("Directories")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspaceDirectoryArtifact", b =>
                {
                    b.HasOne("WorkspaceService.Domain.Entities.WorkspaceDirectory", null)
                        .WithMany("Artifacts")
                        .HasForeignKey("DirectoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspaceDirectoryNesting", b =>
                {
                    b.HasOne("WorkspaceService.Domain.Entities.WorkspaceDirectory", null)
                        .WithMany("ParentNesting")
                        .HasForeignKey("ChildDirectoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkspaceService.Domain.Entities.WorkspaceDirectory", "ChildDirectoryNavigation")
                        .WithMany()
                        .HasForeignKey("ChildDirectoryNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_workspace_directory_nesting_workspace_directory_ChildDirec~1");

                    b.HasOne("WorkspaceService.Domain.Entities.WorkspaceDirectory", null)
                        .WithMany("ChildNesting")
                        .HasForeignKey("ParentDirectoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkspaceService.Domain.Entities.WorkspaceDirectory", "ParentDirectoryNavigation")
                        .WithMany()
                        .HasForeignKey("ParentDirectoryNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_workspace_directory_nesting_workspace_directory_ParentDire~1");

                    b.Navigation("ChildDirectoryNavigation");

                    b.Navigation("ParentDirectoryNavigation");
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspacePosition", b =>
                {
                    b.HasOne("WorkspaceService.Domain.Entities.Workspace", null)
                        .WithMany("Positions")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspaceRole", b =>
                {
                    b.HasOne("WorkspaceService.Domain.Entities.Workspace", null)
                        .WithMany("Roles")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspaceRoleClaim", b =>
                {
                    b.HasOne("WorkspaceService.Domain.Entities.WorkspaceRole", null)
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspaceUser", b =>
                {
                    b.HasOne("WorkspaceService.Domain.Entities.WorkspacePosition", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkspaceService.Domain.Entities.WorkspaceRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkspaceService.Domain.Entities.Workspace", null)
                        .WithMany("Users")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.Workspace", b =>
                {
                    b.Navigation("Directories");

                    b.Navigation("Positions");

                    b.Navigation("Roles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspaceDirectory", b =>
                {
                    b.Navigation("Artifacts");

                    b.Navigation("ChildNesting");

                    b.Navigation("ParentNesting");
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspaceRole", b =>
                {
                    b.Navigation("Claims");
                });
#pragma warning restore 612, 618
        }
    }
}
