// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WorkspaceService.Infrastructure.Data;

#nullable disable

namespace WorkspaceService.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250320131833_Migration20250320")]
    partial class Migration20250320
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspaceDirectory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("WorkspaceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("WorkspaceDirectory", "workspace");
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspaceDirectoryArtifact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DirectoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("Id");

                    b.HasIndex("DirectoryId");

                    b.ToTable("WorkspaceDirectoryArtifact", "workspace");
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspaceDirectoryNesting", b =>
                {
                    b.Property<string>("ParentDirectoryId")
                        .HasColumnType("text");

                    b.Property<string>("ChildDirectoryId")
                        .HasColumnType("text");

                    b.HasKey("ParentDirectoryId", "ChildDirectoryId");

                    b.HasIndex("ChildDirectoryId");

                    b.ToTable("Nesting");
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspacePositions", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("WorkspaceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("WorkspacePositions", "workspace");
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspaceRoleClaims", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("WorkspaceRolesId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("WorkspaceRolesId");

                    b.ToTable("WorkspaceRoleClaims", "workspace");
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspaceRoles", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("WorkspaceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("WorkspaceRoles", "workspace");
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspaceUsers", b =>
                {
                    b.Property<string>("WorkspaceId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("PositionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("WorkspaceId", "UserId");

                    b.HasIndex("PositionId");

                    b.HasIndex("RoleId");

                    b.ToTable("WorkspaceUsers", "workspace");
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.Workspaces", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("Id");

                    b.ToTable("Workspaces", "workspace");
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspaceDirectory", b =>
                {
                    b.HasOne("WorkspaceService.Domain.Entities.Workspaces", "Workspace")
                        .WithMany("Directories")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspaceDirectoryArtifact", b =>
                {
                    b.HasOne("WorkspaceService.Domain.Entities.WorkspaceDirectory", "Directory")
                        .WithMany("Artifacts")
                        .HasForeignKey("DirectoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Directory");
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspaceDirectoryNesting", b =>
                {
                    b.HasOne("WorkspaceService.Domain.Entities.WorkspaceDirectory", "ChildDirectoryNavigation")
                        .WithMany("ParentNesting")
                        .HasForeignKey("ChildDirectoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkspaceService.Domain.Entities.WorkspaceDirectory", "ParentDirectoryNavigation")
                        .WithMany("ChildNesting")
                        .HasForeignKey("ParentDirectoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChildDirectoryNavigation");

                    b.Navigation("ParentDirectoryNavigation");
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspacePositions", b =>
                {
                    b.HasOne("WorkspaceService.Domain.Entities.Workspaces", "Workspace")
                        .WithMany("Positions")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspaceRoleClaims", b =>
                {
                    b.HasOne("WorkspaceService.Domain.Entities.WorkspaceRoles", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkspaceService.Domain.Entities.WorkspaceRoles", null)
                        .WithMany("RoleClaims")
                        .HasForeignKey("WorkspaceRolesId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspaceRoles", b =>
                {
                    b.HasOne("WorkspaceService.Domain.Entities.Workspaces", "Workspace")
                        .WithMany("Roles")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspaceUsers", b =>
                {
                    b.HasOne("WorkspaceService.Domain.Entities.WorkspacePositions", null)
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkspaceService.Domain.Entities.WorkspaceRoles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkspaceService.Domain.Entities.Workspaces", null)
                        .WithMany("Users")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspaceDirectory", b =>
                {
                    b.Navigation("Artifacts");

                    b.Navigation("ChildNesting");

                    b.Navigation("ParentNesting");
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.WorkspaceRoles", b =>
                {
                    b.Navigation("RoleClaims");
                });

            modelBuilder.Entity("WorkspaceService.Domain.Entities.Workspaces", b =>
                {
                    b.Navigation("Directories");

                    b.Navigation("Positions");

                    b.Navigation("Roles");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
